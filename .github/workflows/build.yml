name: XRTK CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: self-hosted
    outputs:
      editor-path: ${{ steps.unity-validate.outputs.editor-path }}
      project-path: ${{ steps.unity-validate.outputs.project-path }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: get package info
        run: |
          Write-Host $PSScriptRoot
          $packageDir = Get-ChildItem $PSScriptRoot -Recurse | Where-Object { $_.PSIsContainer -and (-not ($_.Parent.FullName.Contains('Submodules') -or $_.Parent.FullName.Contains('Builds'))) -and $_.Parent.FullName.Contains('Packages') -and $_.Name.Contains('com.xrtk') } | Select-Object -ExpandProperty FullName
          Write-Host $packageDir

      - id: unity-validate
        uses: xrtk/unity-validate@main

      - uses: xrtk/unity-action@main
        name: 'project-validation'
        with:
          name: 'project-validation'
          editor-path: '${{ steps.unity-validate.outputs.editor-path }}'
          project-path: '${{ steps.unity-validate.outputs.project-path }}'
          args: '-quit -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject'

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 'Validation-Results'
          path: '${{ steps.unity-validate.outputs.project-path }}\Builds\Logs'

      - name: cleanup
        run: |
          $logDirectory = "${{ steps.unity-validate.outputs.project-path }}\Builds"

          if (Test-Path -Path $logDirectory) {
            Remove-Item $logDirectory -Force -Recurse
          }
        shell: powershell

  build:
    needs: validate
    runs-on: self-hosted
    strategy:
      matrix:
        build-target: [StandaloneWindows64, WSAPlayer, Android, Lumin]
      max-parallel: 1

    steps:
      - uses: xrtk/unity-action@main
        name: '${{ matrix.build-target }}-Tests'
        with:
          name: '${{ matrix.build-target }}-Tests'
          editor-path: '${{ needs.validate.outputs.editor-path }}'
          project-path: '${{ needs.validate.outputs.project-path }}'
          build-target: '${{ matrix.build-target }}'
          args: '-batchmode -runEditorTests'

      - uses: xrtk/unity-action@main
        name: '${{ matrix.build-target }}-Build'
        with:
          name: '${{ matrix.build-target }}-Build'
          editor-path: '${{ needs.validate.outputs.editor-path }}'
          project-path: '${{ needs.validate.outputs.project-path }}'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod XRTK.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild'

      - name: 'zip artifacts'
        if: always()
        run: |
          $artifacts = "${{ needs.validate.outputs.project-path }}\Builds"

          if (Test-Path -Path $artifacts) {
            Compress-Archive -Path "$artifacts\*" -DestinationPath ${{ github.workspace }}\${{ matrix.build-target }}-Artifacts.zip
            Remove-Item $artifacts -Force -Recurse
          }
        shell: powershell

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: '${{ matrix.build-target }}-Artifacts'
          path: '${{ github.workspace }}\${{ matrix.build-target }}-Artifacts.zip'

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build
    runs-on:  ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: upm subtree split
        run: |
          git subtree split --prefix="XRTK.Core/Packages/com.xrtk.core" -b upm
          git push -u origin upm --force
